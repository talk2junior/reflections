When would you want to use a remote repository rather than keeping all your work
local?

    When you are working on the road or away from your main computer. Remote access
    offers many developers to work on the same file without affecting the master copy.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You may want to always pull changes manually rather than automatically so
    that you can control the changes made and properly log each edit.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks clone a repository on GitHub to another GitHub id on the GitHub site. Cloning can happen on your local computer between two repositories and between the GitHub and Local computer. Branches are within one repository and simply separate from the master till changes are committed. Each have a different purpose and help with coding between multiple collaborators on the project.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Understanding what changes have occurred. This would limit repetition of information between different users and account for any changes that occurred that need to be committed to final file. Having a historical list of changes in real time helps to promote productivity on the project. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I think the easiest way would be face to face, but this is unrealistic if you are working in a large group, especially from around the country. Using email, phone or video conferencing would prove helpful. Screen sharing would be an option as well. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You would want to make changes in a separate branch when you have multiple people working on the project. That way you can quickly identify bugs or make adjustments to the file that would benenit the end user. Working on the master allows you to deliver faster publishing of the program for the end user.
